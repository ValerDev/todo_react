{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","newItem","todoList","key","value","setState","defineProperty","id","Math","random","slice","marked","toConsumableArray","push","alert","event","preventDefault","updatedList","filter","item","document","getElementById","classList","toggle","_this2","classes","forEach","e","react_default","a","createElement","className","size","color","onSubmit","addItemKeyPress","type","placeholder","onChange","updateInput","target","onClick","addItem","map","join","itemMarked","deleteItem","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2QA4GeA,qBAzGb,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACHQ,MAAQ,CACXC,QAAS,GACTC,SAAU,IAJIT,2EASNU,EAAIC,GACdR,KAAKS,SAALX,OAAAY,EAAA,EAAAZ,CAAA,GACGS,EAAMC,sCAMT,IAAMH,EAAU,CACdM,GAAI,EAAIC,KAAKC,SACbL,MAAOR,KAAKI,MAAMC,QAAQS,QACxBC,QAAQ,GAGZ,GAAIf,KAAKI,MAAMC,QAEV,CAEH,IAAMC,EAASR,OAAAkB,EAAA,EAAAlB,CAAIE,KAAKI,MAAME,UAC9BA,EAASW,KAAKZ,GACdL,KAAKS,SAAS,CACZH,WACAD,QAAS,UAPXa,MAAO,2EAYKC,GACdA,EAAMC,oDAEGT,GACL,IAEMU,EAFKvB,OAAAkB,EAAA,EAAAlB,CAAOE,KAAKI,MAAME,UAEHgB,OAAO,SAAAC,GAAI,OAAIA,EAAKZ,KAAOA,IACrDX,KAAKS,SAAS,CAACH,SAAUe,uCAGnBV,GACGa,SAASC,eAAed,GAC9Be,UAAUC,OAAO,yCAMjB,IAAAC,EAAA5B,KACE6B,EAAU,CAAC,QASpB,OAPO7B,KAAKI,MAAME,SAASwB,QAAQ,SAASC,GAC9BA,EAAEhB,QACLc,EAAQZ,KAAK,UAKjBe,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACpBH,EAAAC,EAAAC,cAAA,QAAME,KAAM,EAAGC,MAAM,WAArB,aACAL,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,QAAMI,SAAUtC,KAAKuC,iBACnBP,EAAAC,EAAAC,cAAA,SACIC,UAAU,MACVK,KAAK,OACLC,YAAY,mBACZjC,MAAOR,KAAKI,MAAMC,QAClBqC,SAAU,SAAAX,GAAC,OAAIH,EAAKe,YAAY,UAAWZ,EAAEa,OAAOpC,UAExDwB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,SACVU,QAAS,kBAAMjB,EAAKkB,YAD5B,QAMFd,EAAAC,EAAAC,cAAA,OAAKvB,GAAG,SACNqB,EAAAC,EAAAC,cAAA,UACKlC,KAAKI,MAAME,SAASyC,IAAI,SAAAxB,GACzB,OAAOS,EAAAC,EAAAC,cAAA,MAAI3B,IAAKgB,EAAKZ,GAAIwB,UAAWN,EAAQmB,KAAK,KAAOrC,GAAMY,EAAKZ,GAAKkC,QAAS,kBAAMjB,EAAKqB,WAAW1B,EAAKZ,MAInGY,EAAKf,MACVwB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,YACVU,QAAS,kBAAMjB,EAAKsB,WAAW3B,EAAKZ,MAD5C,6BA5FCwC,IAAMC,YCULC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,MAASpC,SAASC,eAAe,SD2H3C,kBAAmBoC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7ebb81da.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nclass  App extends React.Component{\n  constructor(props){\n      super(props);\n    this.state = {\n      newItem: '',\n      todoList: [ ]\n\n    }\n  }\n\n  updateInput(key,value){\n    this.setState({\n      [key]: value\n\n    });\n  }\n\n  addItem (){\n    const newItem = {\n      id: 1 + Math.random(),\n      value: this.state.newItem.slice(),\n        marked: false\n    };\n\n    if(!this.state.newItem) {\n      alert ('Please, write some todo item !!')\n    }else{\n\n      const todoList=[...this.state.todoList];\n      todoList.push(newItem);\n      this.setState({\n        todoList,\n        newItem: \"\"\n      })\n    };\n  }\n\n  addItemKeyPress(event){\n    event.preventDefault();\n  }\n  deleteItem(id){\n        const  list = [...this.state.todoList];\n\n        const updatedList =  list.filter(item => item.id !== id);\n        this.setState({todoList: updatedList});\n    }\n\n  itemMarked (id) {\n      let elem = document.getElementById(id);\n      elem.classList.toggle('line')\n\n\n    }\n\n\n  render() {\n       const classes = ['list']\n\n           this.state.todoList.forEach(function(e) {\n               if(e.marked){\n               classes.push('line')\n           }\n\n           });\n\n    return <div className='App'>\n      <font size={7} color=\"#6495ed\">ToDo list</font>\n      <br/>\n      <br/>\n      <div>\n        <form onSubmit={this.addItemKeyPress}>\n          <input\n              className=\"inp\"\n              type=\"text\"\n              placeholder=\"Type item here..\"\n              value={this.state.newItem}\n              onChange={e => this.updateInput(\"newItem\", e.target.value)}\n          />\n          <button className=\"addBtn\"\n                  onClick={() => this.addItem()}>\n            Add\n          </button>\n        </form>\n\n        <div id=\"mydiv\">\n          <ul>\n              {this.state.todoList.map(item => {\n              return <li key={item.id} className={classes.join(' ')}  id = {item.id}  onClick={() => this.itemMarked(item.id)}\n\n\n              >\n                      {item.value}\n                  <button className=\"remuveBtn\"\n                          onClick={() => this.deleteItem(item.id)}\n                  >\n                      Remove item\n                  </button>\n                  </li>\n              })}\n          </ul>\n        </div>\n      </div>\n    </div>;\n\n  }\n}\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}